def getDockerCompatibleTag(tag) {
    def fixedTag = tag.replaceAll('\\+', '-')
    return fixedTag
}

def getDockerImageName(folder) {
    files = findFiles(glob: "${DOCKERFILE_PATH}/*.*")
    def list = []

    for (def file : files) {
        def token = (file.getName()).tokenize('.')
        if (token.size() > 1 && token[1] == "Dockerfile") {
            list.push(token[0])
        } else {
            println("File not added " + token[0])
        }
    }
    return list

}

def getAWSTag(tag) {
    if (tag ==~ /release-.*/) {
        return "release"
    }
    if (tag ==~ /develop/) {
        return "develop"
    }
    if (tag ==~ /staging/) {
        return "staging"
    }
    return "unknown"
}

def getArtifactoryUrl() {
    echo "Choosing an Artifactory port based off of branch name: $GIT_BRANCH"

    if (GIT_BRANCH ==~ /release-.*/) {
        echo "Publishing to 16002-STAGE-LOCAL"
        return "cae-artifactory.jpl.nasa.gov:16002"
    }
    else {
        echo "Publishing to 16001-DEVELOP-LOCAL"
        return "cae-artifactory.jpl.nasa.gov:16001"
    }
}

pipeline {

    agent {
        label 'coronado || Pismo || San-clemente || Sugarloaf'
    }

    environment {
        ARTIFACTORY_URL = "${getArtifactoryUrl()}"
        ARTIFACT_PATH = "${ARTIFACTORY_URL}/gov/nasa/jpl/ammos/mpsa/aerie"
        ARTIFACT_TAG = "${GIT_BRANCH}"
        AWS_ACCESS_KEY_ID = credentials('aerie-aws-access-key')
        AWS_DEFAULT_REGION = 'us-gov-west-1'
        AWS_ECR = "448117317272.dkr.ecr.us-gov-west-1.amazonaws.com"
        AWS_ECR_PATH = "${AWS_ECR}/aerie"
        AWS_SECRET_ACCESS_KEY = credentials('aerie-aws-secret-access-key')
        AWS_TAG = "${getAWSTag(DOCKER_TAG)}"
        DOCKERFILE_DIR = "${env.WORKSPACE}/scripts/dockerfiles"
        DOCKERFILE_PATH = "scripts/dockerfiles"
        DOCKER_TAG = "${getDockerCompatibleTag(ARTIFACT_TAG)}"
        JAVA_HOME = "/usr/lib/jvm/java-11-openjdk"
        LD_LIBRARY_PATH = "/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib"
        TESTRAIL_API_KEY = credentials('testrail-api-key')
        TESTRAIL_SUITE_ID = 4115
        TESTRAIL_USERNAME = credentials('testrail-username')
    }

    stages {
        stage('Setup') {
            steps {
                echo "Printing environment variables..."
                sh "env | sort"
            }
        }

        stage ('Build') {
            steps {
                echo "Building $ARTIFACT_TAG..."
                sh './gradlew classes'
            }
        }

        stage ('Test') {
            steps {
                sh './gradlew test'

                // Jenkins will complain about "old" test results if Gradle didn't need to re-run them.
                // Bump their last modified time to trick Jenkins.
                sh 'find . -name "TEST-*.xml" -exec touch {} \\;'
                junit testResults: '*/build/test-results/test/*.xml'

                // TODO: Fix this script to work with the JUnit XML files produced by Gradle.
                //echo "Uploading tests to test rail."
                //sh "scripts/testrail.sh ${env.WORKSPACE}/testOutput.xml $TESTRAIL_SUITE_ID"
            }
        }
    }

    post {
        always {
            echo 'Remove temp folder'
            sh 'rm -rf /tmp/aerie-jenkins'
        }

        unstable {
            emailext subject: "Jenkins UNSTABLE: ${env.JOB_BASE_NAME} #${env.BUILD_NUMBER}",
            body: """
                <p>Jenkins job unstable (failed tests): <br> <a href=\"${env.BUILD_URL}\">${env.JOB_NAME} #${env.BUILD_NUMBER}</a></p>
            """,
            mimeType: 'text/html',
            recipientProviders: [[$class: 'FailingTestSuspectsRecipientProvider']]
        }

        failure {
            emailext subject: "Jenkins FAILURE: ${env.JOB_BASE_NAME} #${env.BUILD_NUMBER}",
            body: """
                <p>Jenkins job failure: <br> <a href=\"${env.BUILD_URL}\">${env.JOB_NAME} #${env.BUILD_NUMBER}</a></p>
            """,
            mimeType: 'text/html',
            recipientProviders: [[$class: 'CulpritsRecipientProvider']]
        }
    }
}
