type Mutation {
  addExternalDataset(
    planId: Int!
    datasetStart: String!
    profileSet: ProfileSet!
  ): AddExternalDatasetResponse
}

type Mutation {
  uploadDictionary(dictionary: String!): CommandDictionaryResponse
}

type Mutation {
  addCommandExpansionTypeScript(
    activityTypeName: String!
    expansionLogic: String!
  ): AddCommandExpansionResponse
}

type Mutation{
  createExpansionSet(
    commandDictionaryId: Int!
    missionModelId: Int!
    expansionIds: [Int!]!
  ): ExpansionSetResponse
}

type Mutation{
  expandAllActivities(
    expansionSetId: Int!
    simulationDatasetId: Int!
  ): ExpandAllActivitiesResponse
}

type Query {
  getModelEffectiveArguments(
    missionModelId: ID!
    modelArguments: ModelArguments!
  ): EffectiveArgumentsResponse
}

type Query {
  getActivityEffectiveArguments(
    missionModelId: ID!
    activityTypeName: String!
    activityArguments: ActivityArguments!
  ): EffectiveArgumentsResponse
}

type Query {
  getActivityTypeScript(
    missionModelId: Int!
    activityTypeName: String!
  ): TypeScriptResponse
}

type Query {
  getCommandTypeScript(
  commandDictionaryId: Int!): TypeScriptResponse
}

type Query {
  resourceTypes(
    missionModelId: ID!
  ): [ResourceType!]!
}

type Query {
  schedule(
    specificationId: Int!
  ): SchedulingResponse
}

type Query {
  schedulingDslTypescript(
    missionModelId: Int!
  ): SchedulingDslTypescriptResponse
}

type Query {
  simulate(
    planId: Int!
  ): MerlinSimulationResponse
}

type Query {
  validateActivityArguments(
    activityTypeName: String!
    missionModelId: ID!
    activityArguments: ActivityArguments!
  ): ValidationResponse
}

type Query {
  validateModelArguments(
    missionModelId: ID!
    modelArguments: ModelArguments!
  ): ValidationResponse
}

enum MerlinSimulationStatus {
  complete
  failed
  incomplete
}

enum SchedulingStatus {
  complete
  failed
  incomplete
}

enum SchedulingDslTypescriptResponseStatus {
  success
  failure
}

type ResourceType {
  name: String!
  schema: ResourceSchema!
}

type MerlinSimulationResponse {
  status: MerlinSimulationStatus!
  results: MerlinSimulationResults
  reason: MerlinSimulationFailureReason
}

type ValidationResponse {
  errors: [String!]
  success: Boolean!
}

type EffectiveArgumentsResponse {
  success: Boolean!
  arguments: ActivityArguments
  errors: [String!]
}

type AddExternalDatasetResponse {
  datasetId: Int!
}

type SchedulingResponse {
  status: SchedulingStatus!
  reason: SchedulingFailureReason
}

type SchedulingDslTypescriptResponse {
  status: SchedulingDslTypescriptResponseStatus!
  typescript: String
  typescriptFiles: [TypescriptFile]
  reason: String
}

type TypescriptFile {
  filename: String,
  contents: String
}

type CommandDictionaryResponse {
  id: Int!
}

type ExpansionSetResponse {
  id: Int!
}

type AddCommandExpansionResponse {
  id: Int!
}

type TypeScriptResponse {
  typescript: String!
}

type ExpandAllActivitiesResponse {
  id: Int!
  expandedActivityInstances: [ExpandedActivityInstance!]!
}

type ExpandedActivityInstance {
  id: Int!
  commands: [CommandSeqJson!]
  errors: [UserCodeError!]!
}

enum CommandSeqJsonStepType {
  command
}

enum CommandSeqJsonTimeType {
  COMPLETE
}

type CommandSeqJson {
  id: String!,
  metadata: Any!,
  steps: [CommandSeqJsonStep!]!
}

type CommandSeqJsonStep {
  stem: String!,
  time: CommandSeqJsonTime!,
  type: CommandSeqJsonStepType!,
  metadata: Any!
  args: [Any!]!
}

type CommandSeqJsonTime {
  type: CommandSeqJsonTimeType!
}

type UserCodeError {
  message: String!
  stack: String!
  sourceContext: String!
  location: CodeLocation
}

type CodeLocation {
  line: Int!
  column: Int!
}

scalar ResourceSchema

scalar MerlinSimulationResults

scalar MerlinSimulationFailureReason

scalar ModelArguments

scalar ActivityArguments

scalar ProfileSet

scalar SchedulingFailureReason

scalar CommandArgumentsSeqJson

scalar Any
