/****** NEW TABLES ******/
/*-- CONSTRAINT METADATA --*/
create table constraint_metadata(
  id integer generated by default as identity,

  name text not null,
  description text not null default '',
  public boolean not null default false,

  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),

  owner text,
  updated_by text,

  constraint constraint_metadata_pkey
    primary key (id),
  constraint constraint_owner_exists
    foreign key (owner)
    references metadata.users
    on update cascade
    on delete set null,
  constraint constraint_updated_by_exists
    foreign key (updated_by)
    references metadata.users
    on update cascade
    on delete set null
);

-- A partial index is used to enforce name uniqueness only on constraints visible to other users
create unique index name_unique_if_published on constraint_metadata (name) where public;

comment on table constraint_metadata is e''
  'The metadata for a constraint';
comment on column constraint_metadata.id is e''
  'The unique identifier of the constraint';
comment on column constraint_metadata.name is e''
  'A human-meaningful name.';
comment on column constraint_metadata.description is e''
  'A detailed description suitable for long-form documentation.';
comment on column constraint_metadata.owner is e''
  'The user responsible for this constraint.';
comment on column constraint_metadata.public is e''
  'Whether this constraint is visible to all users.';
comment on column constraint_metadata.updated_by is e''
  'The user who last modified this constraint''s metadata.';
comment on column constraint_metadata.created_at is e''
  'The time at which this constraint was created.';
comment on column constraint_metadata.updated_at is e''
  'The time at which this constraint''s metadata was last modified.';

/*-- CONSTRAINT DEFINITION --*/
create table constraint_definition(
  constraint_id integer not null,
  revision integer not null default 0,
  definition text not null,
  author text,
  created_at timestamptz not null default now(),

  constraint constraint_definition_pkey
    primary key (constraint_id, revision),
  constraint constraint_definition_constraint_exists
    foreign key (constraint_id)
    references constraint_metadata
    on update cascade
    on delete cascade,
  constraint constraint_definition_author_exists
    foreign key (author)
    references metadata.users
    on update cascade
    on delete set null
);

comment on table constraint_definition is e''
  'The specific revisions of a constraint''s definition';
comment on column constraint_definition.revision is e''
  'An identifier of this definition.';
comment on column constraint_definition.definition is e''
  'An executable expression in the Merlin constraint language.';
comment on column constraint_definition.author is e''
  'The user who authored this revision.';
comment on column constraint_definition.created_at is e''
  'When this revision was created.';

create function constraint_definition_set_revision()
returns trigger
volatile
language plpgsql as $$
declare
  max_revision integer;
begin
  -- Grab the current max value of revision, or -1, if this is the first revision
  select coalesce((select revision
  from constraint_definition
  where constraint_id = new.constraint_id
  order by revision desc
  limit 1), -1)
  into max_revision;

  new.revision = max_revision + 1;
  return new;
end
$$;
create trigger constraint_definition_set_revision
  before insert on constraint_definition
  for each row
  execute function constraint_definition_set_revision();

/*-- CONSTRAINT SPECIFICATION --*/
create table constraint_specification(
  plan_id integer not null
    references plan
      on update cascade
      on delete cascade,
  constraint_id integer not null,
  constraint_revision integer, -- latest is NULL
  enabled boolean not null default true,

  constraint constraint_specification_pkey
    primary key (plan_id, constraint_id),
  constraint plan_spec_constraint_exists
    foreign key (constraint_id)
      references constraint_metadata(id)
      on update cascade
      on delete restrict,
  constraint plan_spec_constraint_definition_exists
    foreign key (constraint_id, constraint_revision)
      references constraint_definition(constraint_id, revision)
      on update cascade
      on delete restrict
);

comment on table constraint_specification is e''
'The set of constraints to be checked for a given plan.';
comment on column constraint_specification.plan_id is e''
'The plan which this specification is for. Half of the primary key.';
comment on column constraint_specification.constraint_id is e''
'The id of a specific constraint in the specification. Half of the primary key.';
comment on column constraint_specification.constraint_revision is e''
'The version of the constraint definition to use. Leave NULL to use the latest version.';
comment on column constraint_specification.enabled is e''
'Whether to run a given constraint. Defaults to TRUE.';

/*-- CONSTRAINT MODEL SPECIFICATION --*/
create table constraint_model_specification(
  model_id integer not null
    references mission_model
      on update cascade
      on delete cascade,
  constraint_id integer not null,
  constraint_revision integer, -- latest is NULL

  constraint constraint_model_spec_pkey
    primary key (model_id, constraint_id),
  constraint model_spec_constraint_exists
    foreign key (constraint_id)
      references constraint_metadata(id)
      on update cascade
      on delete restrict,
  constraint model_spec_constraint_definition_exists
    foreign key (constraint_id, constraint_revision)
      references constraint_definition(constraint_id, revision)
      on update cascade
      on delete restrict
);

comment on table constraint_model_specification is e''
'The set of constraints that all plans using the model should include in their constraint specification.';
comment on column constraint_model_specification.model_id is e''
'The model which this specification is for. Half of the primary key.';
comment on column constraint_model_specification.constraint_id is e''
'The id of a specific constraint in the specification. Half of the primary key.';
comment on column constraint_model_specification.constraint_revision is e''
'The version of the constraint definition to use. Leave NULL to use the latest version.';

/*-- PLAN TRIGGER --*/
create function populate_constraint_spec_new_plan()
returns trigger
language plpgsql as $$
begin
  insert into constraint_specification (plan_id, constraint_id, constraint_revision)
  select new.id, cms.constraint_id, cms.constraint_revision
  from constraint_model_specification cms
  where cms.model_id = new.model_id;
  return new;
end;
$$;
comment on function populate_constraint_spec_new_plan() is e''
'Populates the plan''s constraint specification with the contents of its model''s specification.';

create trigger populate_constraint_spec_new_plan_trigger
after insert on plan
for each row
execute function populate_constraint_spec_new_plan();

/******* DATA MIGRATION *******/
insert into constraint_metadata(id, name, description, public, created_at, updated_at, owner, updated_by)
select c.id, c.name, c.description, false, c.created_at, c.updated_at, c.owner, c.updated_by
  from "constraint" c;

insert into constraint_definition(constraint_id, definition, author, created_at)
select cm.id, c.definition, c.owner, c.created_at
  from "constraint" c join constraint_metadata cm using (id);

insert into constraint_model_specification(model_id, constraint_id, constraint_revision)
select c.model_id, cd.constraint_id, cd.revision
  from "constraint" c join constraint_definition cd on c.id = cd.constraint_id
  where c.model_id is not null;

insert into constraint_specification(plan_id, constraint_id, constraint_revision, enabled)
select c.plan_id, cd.constraint_id, cd.revision, true
  from "constraint" c join constraint_definition cd on c.id = cd.constraint_id
  where c.plan_id is not null;

-- Additionally pull the model specs in to the plan specs
insert into constraint_specification (plan_id, constraint_id, constraint_revision, enabled)
select p.id, cms.constraint_id, cms.constraint_revision, true
  from constraint_model_specification cms join plan p using (model_id);

-- Remove "by default" generation now that we have moved the existing constraints
alter table constraint_metadata alter column id set generated always;

-- Add timestamp trigger for future entries
create function constraint_metadata_set_updated_at()
returns trigger
security definer
language plpgsql as $$begin
  new.updated_at = now();
  return new;
end$$;

create trigger set_timestamp
before update on constraint_metadata
for each row
execute function constraint_metadata_set_updated_at();

/****** CONSTRAINT RUN ******/
-- Clear cache
truncate table constraint_run;

-- Update constraint_run to reference new table
alter table constraint_run
drop constraint constraint_run_key,
drop constraint constraint_run_to_constraint,
drop column constraint_definition,
drop column definition_outdated,
add column constraint_revision integer not null,
add constraint constraint_run_to_constraint_definition
  foreign key (constraint_id, constraint_revision)
      references constraint_definition
      on delete cascade,
add constraint constraint_run_key
  primary key (constraint_id, constraint_revision, simulation_dataset_id);

 comment on column constraint_run.constraint_revision is e''
  'The version of the constraint definition that was checked.';

/****** TAGS *******/
alter table metadata.constraint_tags drop constraint constraint_tags_constraint_id_fkey;
alter table metadata.constraint_tags add foreign key (constraint_id)
  references public.constraint_metadata
    on update cascade
    on delete cascade;

create table metadata.constraint_definition_tags (
  constraint_id integer not null,
  constraint_revision integer not null,
  tag_id integer not null references metadata.tags
    on update cascade
    on delete cascade,
  primary key (constraint_id, constraint_revision, tag_id),
  foreign key (constraint_id, constraint_revision) references constraint_definition
    on update cascade
    on delete cascade
);
comment on table metadata.constraint_definition_tags is e''
  'The tags associated with a specific constraint defintion.';


/**** DROP CONSTRAINTS ****/
drop trigger set_timestamp on "constraint";
drop trigger constraint_check_constraint_run_trigger on "constraint";

drop function constraint_set_updated_at();
drop function constraint_check_constraint_run();

drop table "constraint";

call migrations.mark_migration_applied('38');
