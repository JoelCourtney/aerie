import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
  id 'java'
  id 'io.github.goooler.shadow' version '8.1.7'
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation project(':procedural:constraints')
  compileOnly project(':procedural:timeline')
  implementation project(':merlin-framework')
}

// Parent task that can call all buildConstraintJar_* tasks
tasks.register('buildAllConstraintJars') {
  group = 'ConstraintJars'

  dependsOn "generateConstraintJarTasks"
  dependsOn(provider {
    tasks.findAll { task -> task.name.startsWith('buildConstraintJar_') }
  })
}

shadowJar {
  dependencies {
    exclude(project(':procedural:timeline')) // dynamically link timeline lib at runtime
    exclude(":kotlin.*")
  }
}

tasks.create("generateConstraintJarTasks") {
  group = 'ConstraintJars'
  dependsOn assemble

  def targetDirName = "constraints"
  def constraintsDir = findFirstMatchingDir("constraints");

  if (constraintsDir == null) {
    println "No constraints folder found"
    return
  }

  println "Generating jar tasks for the following constraints directory: ${constraintsDir}"

  def files = file(constraintsDir).listFiles()
  if (files.length == 0) {
    println "No constraints available within folder ${constraintsDir}"
    return
  }

  files.toList().each { file ->
    def taskName = "buildConstraintJar_${file.name.replace('.class', '')}"
    def jarName = "${file.name.replace('.class', '')}-constraint"

    println "Generating ${taskName} task, which will build ${project.name}-${jarName}.jar"

    tasks.create(taskName, ShadowJar) {
      group = 'ConstraintJars'
      archiveClassifier.set(jarName) // set output jar name
      from file // use just this file as the source code for jar
      configurations = [project.configurations.compileClasspath]
      minimize()
      dependencies {
        exclude(project(':procedural:timeline')) // dynamically link timeline lib at runtime
        exclude(dependency(":kotlin.*"))
      }
    }
  }
}

private String findFirstMatchingDir(String pattern) {
  String found = null
  file("build").eachDirRecurse { dir -> if (dir.path.contains(pattern)) found = dir.path }
  return found
}
