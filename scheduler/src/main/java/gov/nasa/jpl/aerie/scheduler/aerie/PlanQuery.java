// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package gov.nasa.jpl.aerie.scheduler.aerie;

import com.apollographql.apollo.api.Operation;
import com.apollographql.apollo.api.OperationName;
import com.apollographql.apollo.api.Query;
import com.apollographql.apollo.api.Response;
import com.apollographql.apollo.api.ResponseField;
import com.apollographql.apollo.api.ScalarTypeAdapters;
import com.apollographql.apollo.api.internal.InputFieldMarshaller;
import com.apollographql.apollo.api.internal.InputFieldWriter;
import com.apollographql.apollo.api.internal.OperationRequestBodyComposer;
import com.apollographql.apollo.api.internal.QueryDocumentMinifier;
import com.apollographql.apollo.api.internal.ResponseFieldMapper;
import com.apollographql.apollo.api.internal.ResponseFieldMarshaller;
import com.apollographql.apollo.api.internal.ResponseReader;
import com.apollographql.apollo.api.internal.ResponseWriter;
import com.apollographql.apollo.api.internal.SimpleOperationResponseParser;
import com.apollographql.apollo.api.internal.UnmodifiableMapBuilder;
import com.apollographql.apollo.api.internal.Utils;
import okio.Buffer;
import okio.BufferedSource;
import okio.ByteString;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.io.IOException;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;

public final class PlanQuery implements Query<PlanQuery.Data, PlanQuery.Data, PlanQuery.Variables> {
  public static final String OPERATION_ID = "a97b1e6381e0b927c5fe272a26fb5d22ebe36fda759ec14dae87a2211128e586";

  public static final String QUERY_DOCUMENT = QueryDocumentMinifier.minify(
    "query Plan($planId: ID!) {\n"
        + "  plan(id: $planId) {\n"
        + "    __typename\n"
        + "    adaptationId\n"
        + "    name\n"
        + "    startTimestamp\n"
        + "    endTimestamp\n"
        + "  }\n"
        + "}"
  );

  public static final OperationName OPERATION_NAME = new OperationName() {
    @Override
    public String name() {
      return "Plan";
    }
  };

  private final Variables variables;

  public PlanQuery(@NotNull String planId) {
    Utils.checkNotNull(planId, "planId == null");
    variables = new Variables(planId);
  }

  @Override
  public String operationId() {
    return OPERATION_ID;
  }

  @Override
  public String queryDocument() {
    return QUERY_DOCUMENT;
  }

  @Override
  public Data wrapData(Data data) {
    return data;
  }

  @Override
  public Variables variables() {
    return variables;
  }

  @Override
  public ResponseFieldMapper<Data> responseFieldMapper() {
    return new Data.Mapper();
  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public OperationName name() {
    return OPERATION_NAME;
  }

  @Override
  @NotNull
  public Response<Data> parse(@NotNull final BufferedSource source,
                              @NotNull final ScalarTypeAdapters scalarTypeAdapters) throws IOException {
    return SimpleOperationResponseParser.parse(source, this, scalarTypeAdapters);
  }

  @Override
  @NotNull
  public Response<Data> parse(@NotNull final ByteString byteString,
                              @NotNull final ScalarTypeAdapters scalarTypeAdapters) throws IOException {
    return parse(new Buffer().write(byteString), scalarTypeAdapters);
  }

  @Override
  @NotNull
  public Response<Data> parse(@NotNull final BufferedSource source) throws IOException {
    return parse(source, ScalarTypeAdapters.DEFAULT);
  }

  @Override
  @NotNull
  public Response<Data> parse(@NotNull final ByteString byteString) throws IOException {
    return parse(byteString, ScalarTypeAdapters.DEFAULT);
  }

  @Override
  @NotNull
  public ByteString composeRequestBody(@NotNull final ScalarTypeAdapters scalarTypeAdapters) {
    return OperationRequestBodyComposer.compose(this, false, true, scalarTypeAdapters);
  }

  @NotNull
  @Override
  public ByteString composeRequestBody() {
    return OperationRequestBodyComposer.compose(this, false, true, ScalarTypeAdapters.DEFAULT);
  }

  @Override
  @NotNull
  public ByteString composeRequestBody(final boolean autoPersistQueries,
      final boolean withQueryDocument, @NotNull final ScalarTypeAdapters scalarTypeAdapters) {
    return OperationRequestBodyComposer.compose(this, autoPersistQueries, withQueryDocument, scalarTypeAdapters);
  }

  public static final class Builder {
    private @NotNull String planId;

    Builder() {
    }

    public Builder planId(@NotNull String planId) {
      this.planId = planId;
      return this;
    }

    public PlanQuery build() {
      Utils.checkNotNull(planId, "planId == null");
      return new PlanQuery(planId);
    }
  }

  public static final class Variables extends Operation.Variables {
    private final @NotNull String planId;

    private final transient Map<String, Object> valueMap = new LinkedHashMap<>();

    Variables(@NotNull String planId) {
      this.planId = planId;
      this.valueMap.put("planId", planId);
    }

    public @NotNull String planId() {
      return planId;
    }

    @Override
    public Map<String, Object> valueMap() {
      return Collections.unmodifiableMap(valueMap);
    }

    @Override
    public InputFieldMarshaller marshaller() {
      return new InputFieldMarshaller() {
        @Override
        public void marshal(InputFieldWriter writer) throws IOException {
          writer.writeCustom("planId", gov.nasa.jpl.aerie.scheduler.aerie.type.CustomType.ID, planId);
        }
      };
    }
  }

  /**
   * Data from the response after executing this GraphQL operation
   */
  public static class Data implements Operation.Data {
    static final ResponseField[] $responseFields = {
      ResponseField.forObject("plan", "plan", new UnmodifiableMapBuilder<String, Object>(1)
      .put("id", new UnmodifiableMapBuilder<String, Object>(2)
        .put("kind", "Variable")
        .put("variableName", "planId")
        .build())
      .build(), true, Collections.<ResponseField.Condition>emptyList())
    };

    final @Nullable Plan plan;

    private transient volatile String $toString;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    public Data(@Nullable Plan plan) {
      this.plan = plan;
    }

    public @Nullable Plan plan() {
      return this.plan;
    }

    @SuppressWarnings({"rawtypes", "unchecked"})
    public ResponseFieldMarshaller marshaller() {
      return new ResponseFieldMarshaller() {
        @Override
        public void marshal(ResponseWriter writer) {
          writer.writeObject($responseFields[0], plan != null ? plan.marshaller() : null);
        }
      };
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "Data{"
          + "plan=" + plan
          + "}";
      }
      return $toString;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof Data) {
        Data that = (Data) o;
        return ((this.plan == null) ? (that.plan == null) : this.plan.equals(that.plan));
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int h = 1;
        h *= 1000003;
        h ^= (plan == null) ? 0 : plan.hashCode();
        $hashCode = h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    public static final class Mapper implements ResponseFieldMapper<Data> {
      final Plan.Mapper planFieldMapper = new Plan.Mapper();

      @Override
      public Data map(ResponseReader reader) {
        final Plan plan = reader.readObject($responseFields[0], new ResponseReader.ObjectReader<Plan>() {
          @Override
          public Plan read(ResponseReader reader) {
            return planFieldMapper.map(reader);
          }
        });
        return new Data(plan);
      }
    }
  }

  public static class Plan {
    static final ResponseField[] $responseFields = {
      ResponseField.forString("__typename", "__typename", null, false, Collections.<ResponseField.Condition>emptyList()),
      ResponseField.forString("adaptationId", "adaptationId", null, false, Collections.<ResponseField.Condition>emptyList()),
      ResponseField.forString("name", "name", null, false, Collections.<ResponseField.Condition>emptyList()),
      ResponseField.forString("startTimestamp", "startTimestamp", null, false, Collections.<ResponseField.Condition>emptyList()),
      ResponseField.forString("endTimestamp", "endTimestamp", null, false, Collections.<ResponseField.Condition>emptyList())
    };

    final @NotNull String __typename;

    final @NotNull String adaptationId;

    final @NotNull String name;

    final @NotNull String startTimestamp;

    final @NotNull String endTimestamp;

    private transient volatile String $toString;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    public Plan(@NotNull String __typename, @NotNull String adaptationId, @NotNull String name,
        @NotNull String startTimestamp, @NotNull String endTimestamp) {
      this.__typename = Utils.checkNotNull(__typename, "__typename == null");
      this.adaptationId = Utils.checkNotNull(adaptationId, "adaptationId == null");
      this.name = Utils.checkNotNull(name, "name == null");
      this.startTimestamp = Utils.checkNotNull(startTimestamp, "startTimestamp == null");
      this.endTimestamp = Utils.checkNotNull(endTimestamp, "endTimestamp == null");
    }

    public @NotNull String __typename() {
      return this.__typename;
    }

    public @NotNull String adaptationId() {
      return this.adaptationId;
    }

    public @NotNull String name() {
      return this.name;
    }

    public @NotNull String startTimestamp() {
      return this.startTimestamp;
    }

    public @NotNull String endTimestamp() {
      return this.endTimestamp;
    }

    @SuppressWarnings({"rawtypes", "unchecked"})
    public ResponseFieldMarshaller marshaller() {
      return new ResponseFieldMarshaller() {
        @Override
        public void marshal(ResponseWriter writer) {
          writer.writeString($responseFields[0], __typename);
          writer.writeString($responseFields[1], adaptationId);
          writer.writeString($responseFields[2], name);
          writer.writeString($responseFields[3], startTimestamp);
          writer.writeString($responseFields[4], endTimestamp);
        }
      };
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "Plan{"
          + "__typename=" + __typename + ", "
          + "adaptationId=" + adaptationId + ", "
          + "name=" + name + ", "
          + "startTimestamp=" + startTimestamp + ", "
          + "endTimestamp=" + endTimestamp
          + "}";
      }
      return $toString;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof Plan) {
        Plan that = (Plan) o;
        return this.__typename.equals(that.__typename)
         && this.adaptationId.equals(that.adaptationId)
         && this.name.equals(that.name)
         && this.startTimestamp.equals(that.startTimestamp)
         && this.endTimestamp.equals(that.endTimestamp);
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int h = 1;
        h *= 1000003;
        h ^= __typename.hashCode();
        h *= 1000003;
        h ^= adaptationId.hashCode();
        h *= 1000003;
        h ^= name.hashCode();
        h *= 1000003;
        h ^= startTimestamp.hashCode();
        h *= 1000003;
        h ^= endTimestamp.hashCode();
        $hashCode = h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    public static final class Mapper implements ResponseFieldMapper<Plan> {
      @Override
      public Plan map(ResponseReader reader) {
        final String __typename = reader.readString($responseFields[0]);
        final String adaptationId = reader.readString($responseFields[1]);
        final String name = reader.readString($responseFields[2]);
        final String startTimestamp = reader.readString($responseFields[3]);
        final String endTimestamp = reader.readString($responseFields[4]);
        return new Plan(__typename, adaptationId, name, startTimestamp, endTimestamp);
      }
    }
  }
}
