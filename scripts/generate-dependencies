#!/usr/bin/env python3

import argparse
import subprocess
import glob
import sys
import os

# ivyFileLoc is the path where we store the ivy.xml file
# preBuiltLoc is the path to where we want to store our jar files
# conf is the a list of configuratioin we use in our ivy.xml file, currently conf can't be empty
class Service(object):
    def __init__(self, ivyFileLoc, preBuiltLoc, conf):
        self.ivyFileLoc = ivyFileLoc
        self.preBuiltLoc = preBuiltLoc
        self.conf = conf
    def __repr__(self):
        return "ivyFileLoc:%s preBuiltLoc = %s conf = %s \n" % (self.ivyFileLoc, self.preBuiltLoc, self.conf)

    def __str__(self):
       return "ivyFileLoc:%s preBuiltLoc = %s conf = %s \n" % (self.ivyFileLoc, self.preBuiltLoc, self.conf)

def main():

    # This assume this script is in aerie/script directory and I want the base directory to be in aerie.
    BASE_DIR = os.path.abspath(os.path.join(os.path.dirname( __file__ ), '..'))
    # Location where all the jar files will store
    PREBUILT_LOC = BASE_DIR+"/third-party"
    # BUCK file name for BUCK
    BUCK_NAME = "BUCK"
    # Define each of the Aerie services here
    # NOTE:  currently you have to have at least one configuration in the ivy.xml file for your module
    services = dict()
    services["apgen-parser"] = Service(ivyFileLoc=BASE_DIR+"/apgen-parser", preBuiltLoc=PREBUILT_LOC, conf=["test"])
    services["banananation"] = Service(ivyFileLoc=BASE_DIR+"/banananation", preBuiltLoc=PREBUILT_LOC, conf=["core", "test"])
    services["merlin-cli"] = Service(ivyFileLoc=BASE_DIR+"/merlin-cli", preBuiltLoc=PREBUILT_LOC, conf=["core", "test"])
    services["merlin-multimission-models"] = Service(ivyFileLoc=BASE_DIR+"/merlin-multimission-models", preBuiltLoc=PREBUILT_LOC, conf=["core", "test"])
    services["merlin-sdk"] = Service(ivyFileLoc=BASE_DIR+"/merlin-sdk", preBuiltLoc=PREBUILT_LOC, conf=["core", "test"])
    services["sample-adaptation"] = Service(ivyFileLoc=BASE_DIR+"/sample-adaptation", preBuiltLoc=PREBUILT_LOC, conf=["core", "test"])
    services["services"] = Service(ivyFileLoc=BASE_DIR+"/services", preBuiltLoc=PREBUILT_LOC, conf=["core", "test"])

    parser = argparse.ArgumentParser(description='Build BUCK pre-built jar files')

    # Enforcing either (-build | -clean) and ServiceName must be included
    operation_group = parser.add_mutually_exclusive_group(required=True)
    operation_group.add_argument('-build', dest='isBuild', action='store_true',
    help='Generate the specified jar file ')
    operation_group.add_argument('-clean', dest='isBuild', action='store_false',
    help='Delete the specified jar file')
    parser.add_argument('ServiceName', type=str, help='Service name to generate deps, user can specified all for all predefined services')

    args, unknown = parser.parse_known_args()
    serviceName = args.ServiceName

    if args.isBuild:
        print ("Ready to build jar files")
        if serviceName.lower() == "all":
            for name in services:
                generate_jar_files(name, services[name])
                for conf in services[name].conf:
                    generate_bucklib_file(services[name].preBuiltLoc+"/"+
                                        name+"/"+conf,
                                        BUCK_NAME,
                                        name)
        else:
            generate_jar_files(serviceName, services[serviceName])

            if len(services[serviceName].conf) == 0:
                generate_bucklib_file(services[serviceName].preBuiltLoc+"/"+
                                    serviceName+"/"+conf,
                                    BUCK_NAME,
                                    serviceName)
            else:
                for conf in services[serviceName].conf:
                    generate_bucklib_file(services[serviceName].preBuiltLoc+"/"+
                                        serviceName+"/"+conf,
                                        BUCK_NAME,
                                        serviceName)

    else:
        print ("Remove all Services jar files")
        if serviceName.lower() == "all":
            for name in services:
                for conf in services[name].conf:
                    remove_jar_buck_files(services[name].preBuiltLoc+"/"+name+"/"+conf, BUCK_NAME)
        else:
            print ("Remove {0} service jar files".format(serviceName))
            for conf in services[serviceName].conf:
                remove_jar_buck_files(services[serviceName].preBuiltLoc+"/"+serviceName+"/"+conf, BUCK_NAME)

    exit(0)

#############################################
# path -- path to the jar files location
# buckFilename -- name of the buck file to be remove
#
# Description:
# check the directory and remove all the jar and buck files
def remove_jar_buck_files(path, buckFilename):
    print ("Deleting jar files from this path " + path)

    file_list = glob.glob(path+"/*.jar")
    for file in file_list:
        os.remove(file)

    if os.path.exists(path+"/"+buckFilename):
        os.remove(path+"/"+buckFilename)

#############################################
# name -- services name inputed by user
# service -- service class with the ivy location and output location
#
# Description:
# Call ivy cmd to generate dependencies
def generate_jar_files(name, service):
    pattern = "/[conf]/[artifact]-[type]-[revision].[ext]"

    # ivy command to retrieve all dependencies
    cmd_array = ["java", "-jar",
                service.preBuiltLoc + "/ivy.jar -ivy",
                service.ivyFileLoc + "/ivy.xml",
                "-retrieve",  service.preBuiltLoc + "/" + name + pattern]
    try:
        output = subprocess.check_output(" ".join(cmd_array), shell=True, stderr=subprocess.PIPE)
        output = output.decode("utf-8")
        print (output)
    except subprocess.CalledProcessError as e:
        print("Cmd failed: "+" ".join(cmd_array))
        print(e)
        exit(1)

#############################################
# path -- path to the jar files location
# buckFilename -- name of the buck file to be generate
# libName -- the name of the java library, currently set to the name of the service
#
# Description:
# Generate BUCK file for pre-build jar and java_library
def generate_bucklib_file(path, buckFilename, libName):
    if not os.path.exists(path):
        print("Skip: Buck file geneartation in path "+path)
        return

    jar_files = [f for f in os.listdir(path) if f.endswith('.jar')]

    if len(jar_files) == 0:
        print("Skip: Path contain no jar file")
        return

    fp = open(path+"/"+buckFilename, "w")

    for file in jar_files:
        name = file[0:len(file)-len(".jar")]
        fp.write("prebuilt_jar(\n")
        fp.write("     name = '"+name+"',\n")
        fp.write("     binary_jar = '"+file+"',\n")
        fp.write("     visibility = ['PUBLIC']\n")
        fp.write(")\n\n")

    fp.write("java_library(\n")
    fp.write("     name = '"+libName+"',\n")
    fp.write("     exported_deps = [\n")

    for file in jar_files:
        name = file[0:len(file)-len(".jar")]
        fp.write("          \":"+name+"\",\n")

    fp.write("     ],\n")
    fp.write("     visibility = ['PUBLIC'],\n")
    fp.write(")\n\n")
    fp.close()


### Call to Main ###
if __name__ == '__main__':
    print("Python " + sys.version)
    #print(sys.version_info)
    main()
